plugins {
    id 'java'
}

group 'com.icesi.chatapp'
version '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.google.code.gson:gson:2.10.1'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

test {
    useJUnitPlatform()
}

java {
    // ✅ Cambiado a Java 24 (compatible con tu instalación)
    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
    }
}

// ===============================================
// ** TAREAS PARA EJECUTAR EL SERVIDOR Y EL CLIENTE **
// ===============================================
task runServer(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'com.icesi.chatapp.Server.Server'
    workingDir file('.')
}

task runClient(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    mainClass = 'com.icesi.chatapp.Client.Client'
    workingDir file('.')
}

// ===============================================
// ** JAR del Servidor (por defecto con 'gradlew build') **
// ===============================================
jar {
    archiveBaseName = 'chat-server'
    manifest {
        attributes 'Main-Class': 'com.icesi.chatapp.Server.Server'
    }
    from {
        sourceSets.main.output
        sourceSets.main.runtimeClasspath
                .filter { it.exists() }
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// ===============================================
// ** JAR del Cliente **
// ===============================================
task clientJar(type: Jar) {
    archiveBaseName = 'chat-client'
    manifest {
        attributes(
                'Main-Class': 'com.icesi.chatapp.Client.Client'
        )
    }
    from {
        sourceSets.main.output
        sourceSets.main.runtimeClasspath
                .filter { it.exists() }
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// ===============================================
// ** Tarea para generar ambos JARs **
// ===============================================
task buildJars(dependsOn: [jar, clientJar]) {
    group = 'build'
    description = 'Builds both server and client executable JARs.'
}
